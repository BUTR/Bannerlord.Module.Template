<Project Sdk="Microsoft.NET.Sdk" InitialTargets="InitVariables">

  <PropertyGroup>
    <Version>0.0.1</Version>
<!--#if (gameWindows && gameWindowsStore) -->
    <TargetFrameworks>net472;netcoreapp3.1</TargetFrameworks>
<!--#elseif (gameWindows && !gameWindowsStore) -->
    <TargetFramework>net472</TargetFramework>
<!--#elseif (!gameWindows && gameWindowsStore) -->
    <TargetFramework>netcoreapp3.1</TargetFramework>
<!--#endif -->
    <Platforms>x64</Platforms>
    <LangVersion Condition="'$(langVersion)' != ''">$(ProjectLanguageVersion)</LangVersion>
    <Nullable Condition="'$(nullable)' != ''">enable</Nullable>
    <BuildForWindows>false</BuildForWindows>
    <BuildForWindowsStore>false</BuildForWindowsStore>
  </PropertyGroup>

<!--#if (gameWindows) -->
  <PropertyGroup Condition="$(TargetFramework) == 'net472'">
    <BuildForWindows>true</BuildForWindows>
  </PropertyGroup>
<!--#endif -->
<!--#if (gameWindowsStore) -->
  <PropertyGroup Condition="$(TargetFramework) == 'netcoreapp3.1'">
    <BuildForWindowsStore>false</BuildForWindowsStore>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <EnableWindowsTargeting>true</EnableWindowsTargeting>
  </PropertyGroup>
<!--#endif -->

  <PropertyGroup>
    <SettingsJson>$(MSBuildThisFileDirectory)/.vscode/settings.json</SettingsJson>
    <ModuleId>PLACEHOLDER</ModuleId>
    <ModuleName>PLACEHOLDER</ModuleName>
    <ModuleUrl>PLACEHOLDER</ModuleUrl>
  </PropertyGroup>

<!--#if (ReferenceGameAssemblies) -->
  <Target Name="AddGameBinaries" BeforeTargets="ResolveAssemblyReferences">
    <GetJson ContentPath="$(SettingsJson)" Property="gameFolder">
      <Output TaskParameter="PropertyValue" PropertyName="GameFolder" />
    </GetJson>
    <GetJson ContentPath="$(SettingsJson)" Property="gameBinaryFolder">
      <Output TaskParameter="PropertyValue" PropertyName="GameBinariesFolder" />
    </GetJson>
    <ItemGroup>
      <Reference Include="$(GameFolder)\bin\$(GameBinariesFolder)\Newtonsoft.Json.dll">
        <HintPath>%(Identity)</HintPath>
        <Private>False</Private>
      </Reference>
      <Reference Include="$(GameFolder)\bin\$(GameBinariesFolder)\TaleWorlds.*.dll" Exclude="$(GameFolder)\bin\$(GameBinariesFolder)\TaleWorlds.Native.dll">
        <HintPath>%(Identity)</HintPath>
        <Private>False</Private>
      </Reference>
      <Reference Include="$(GameFolder)\Modules\Native\bin\$(GameBinariesFolder)\*.dll">
        <HintPath>%(Identity)</HintPath>
        <Private>False</Private>
      </Reference>
      <Reference Include="$(GameFolder)\Modules\SandBox\bin\$(GameBinariesFolder)\*.dll">
        <HintPath>%(Identity)</HintPath>
        <Private>False</Private>
      </Reference>
      <Reference Include="$(GameFolder)\Modules\SandBoxCore\bin\$(GameBinariesFolder)\*.dll">
        <HintPath>%(Identity)</HintPath>
        <Private>False</Private>
      </Reference>
      <Reference Include="$(GameFolder)\Modules\StoryMode\bin\$(GameBinariesFolder)\*.dll">
        <HintPath>%(Identity)</HintPath>
        <Private>False</Private>
      </Reference>
      <Reference Include="$(GameFolder)\Modules\CustomBattle\bin\$(GameBinariesFolder)\*.dll">
        <HintPath>%(Identity)</HintPath>
        <Private>False</Private>
      </Reference>
      <Reference Include="$(GameFolder)\Modules\BirthAndDeath\bin\$(GameBinariesFolder)\*.dll">
        <HintPath>%(Identity)</HintPath>
        <Private>False</Private>
      </Reference>
    </ItemGroup>
  </Target>
<!--#endif -->

  <ItemGroup>
    <PackageReference Include="Nullable" Version="1.3.1" PrivateAssets="all" IncludeAssets="runtime; build; native; contentfiles; analyzers; buildtransitive" />
    <PackageReference Include="IsExternalInit" Version="1.0.3" PrivateAssets="all" IncludeAssets ="runtime; build; native; contentfiles; analyzers; buildtransitive" />
    <PackageReference Include="Bannerlord.BuildResources" Version="1.1.0.103" PrivateAssets="all" IncludeAssets="runtime; build; native; contentfiles; analyzers; buildtransitive" />
    <PackageReference Condition="'$(ReferenceHarmony)' == 'true'" Include="Bannerlord.Lib.Harmony" Version="2.2.2" IncludeAssets="compile" />
    <PackageReference Condition="'$(ReferenceHarmony)' == 'true'" Include="Harmony.Extensions" Version="3.2.0.77" PrivateAssets="all" IncludeAssets="runtime; build; native; contentfiles; analyzers; buildtransitive" />
    <PackageReference Condition="'$(ReferenceHarmony)' == 'true'" Include="BUTR.Harmony.Analyzer" Version="1.0.1.50" PrivateAssets="all" IncludeAssets="runtime; build; native; contentfiles; analyzers; buildtransitive" />
    <PackageReference Condition="'$(ReferenceUIExtenderEx)' == 'true'" Include="Bannerlord.UIExtenderEx" Version="2.8.0" IncludeAssets="compile" />
    <PackageReference Condition="'$(ReferenceButterLib)' == 'true'" Include="Bannerlord.ButterLib" Version="2.8.11" IncludeAssets="compile" />
    <PackageReference Condition="'$(ReferenceMCM)' == 'true' AND '$(ReferenceMCMAsSoftDependency)' != 'true'" Include="Bannerlord.MCM" Version="5.9.1" IncludeAssets="compile" />
    <PackageReference Condition="'$(ReferenceMCM)' == 'true' AND '$(ReferenceMCMAsSoftDependency)' == 'true'" Include="Bannerlord.MCM" Version="5.9.1" />
    <PackageReference Condition="'$(ReferenceReferenceAssemblies)' == 'true'" Include="Bannerlord.ReferenceAssemblies.Core" Version="$(GameVersion).*-*" PrivateAssets="All" />
    <PackageReference Condition="'$(ReferenceReferenceAssemblies)' == 'true'" Include="Bannerlord.ReferenceAssemblies.Native" Version="$(GameVersion).*-*" PrivateAssets="All" />
    <PackageReference Condition="'$(ReferenceReferenceAssemblies)' == 'true'" Include="Bannerlord.ReferenceAssemblies.StoryMode" Version="$(GameVersion).*-*" PrivateAssets="All" />
    <PackageReference Condition="'$(ReferenceReferenceAssemblies)' == 'true'" Include="Bannerlord.ReferenceAssemblies.SandBox" Version="$(GameVersion).*-*" PrivateAssets="All" />
    <PackageReference Condition="'$(ReferenceReferenceAssemblies)' == 'true'" Include="Bannerlord.ReferenceAssemblies.CustomBattle" Version="$(GameVersion).*-*" PrivateAssets="All" />
    <PackageReference Condition="'$(ReferenceReferenceAssemblies)' == 'true'" Include="Bannerlord.ReferenceAssemblies.BirthAndDeath" Version="$(GameVersion).*-*" PrivateAssets="All" />
    <PackageReference Condition="'$(ReferenceReferenceAssemblies)' == 'true'" Include="Newtonsoft.Json" Version="13.0.1" PrivateAssets="all" IncludeAssets="compile" />
  </ItemGroup>

  <Target Name="InitVariables" >
    <GetJson ContentPath="$(SettingsJson)" Property="moduleId">
      <Output TaskParameter="PropertyValue" PropertyName="ModuleId" />
    </GetJson>
    <GetJson ContentPath="$(SettingsJson)" Property="moduleName">
      <Output TaskParameter="PropertyValue" PropertyName="ModuleName" />
    </GetJson>
    <GetJson ContentPath="$(SettingsJson)" Property="moduleUrl">
      <Output TaskParameter="PropertyValue" PropertyName="ModuleUrl" />
    </GetJson>
    <GetJson ContentPath="$(SettingsJson)" Property="gameFolder">
      <Output TaskParameter="PropertyValue" PropertyName="GameFolder" />
    </GetJson>
    <GetJson ContentPath="$(SettingsJson)" Property="gameBinaryFolder">
      <Output TaskParameter="PropertyValue" PropertyName="GameBinariesFolder" />
    </GetJson>
    <GetJson ContentPath="$(SettingsJson)" Property="gameVersion">
      <Output TaskParameter="PropertyValue" PropertyName="GameVersion" />
    </GetJson>
  </Target>

    <UsingTask
    TaskName="GetJson"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <ContentPath ParameterType="System.String" Required="true" />
      <Property ParameterType="System.String" Required="true" />
      <PropertyValue ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>    
      <Code Type="Fragment" Language="cs">
<![CDATA[
var data = File.ReadAllText(ContentPath);
var start = data.IndexOf(Property);
if (start == -1) { Log.LogError($"Property '{Property}' was not found!"); return false; }
var idx1 = data.IndexOf(':', start + 1);
if (idx1 == -1) { Log.LogError("':' is missing"); return false; }
var idx2 = data.IndexOf("\"", idx1 + 1);
if (idx2 == -1) { Log.LogError("'\"' is missing"); return false; }
var idx3 = data.IndexOf("\"", idx2 + 1);
if (idx3 == -1) { Log.LogError("'\"' is missing"); return false; }
PropertyValue = data.Substring(idx2 + 1, idx3 - idx2 - 1);
]]>
      </Code>
    </Task>
  </UsingTask>

</Project>